redis中内存淘汰机制：
设置key的超时时间
lup内存机制，把不常用的从内存里删了

redis里的hash类型挺像python字典的

有序集合附带分数

HyperLogLog 统计不重复的集合中元素个数  也就是基数

redis 发布订阅 
SUBSCRIBE redisChat  某个客户端订阅频道
PUBLISH redisChat "Redis is a great caching technique"   某个客户端发布消息
订阅的客户端就可以收到消息

flashdb 删除当前库
flashall 删除所有库

redis相当于一个大服务器，每个db0等小数据库对应一个微服务。
或者db0是开发环境 db1是生产环境等

redis事务
multi 开始
命令1
命令2
命令3
exec 执行（中间出错不管，不回滚）

监视 ：
监视a：为了数据安全，在multi后，另一个进程改了a后，事务里也要改a的话，就不行。

持久化 
RDB ：快照，隔一段时间把数据存下来 缺点：还没到下一次快照的时候死机会数据丢失
AOF：把操作日志记下来 缺点：记录了很多无意义的操作 导致储存文件很大
一般都用RDB

redis和数据库同步
实时同步
定时同步
消息队列：

异步消息队列的削峰 就像防止下方被淹的一个大水库
rabbitMQ redis kafak都是消息队列
消息队列特点：
进入队列的消息不能丢失，要可靠。
这点rabbitMQ做的最好，可以0丢失，但是要花钱，而且贵，kafak就免费，它顺序存在硬盘上，速度快。


canel是阿里云的一个实现主从复制的工具

缓存穿透
服务器访问数据的流程是先在redis里找，找不到取mysql里找，
如果redis里没找不到，取mysql找，mysql又没找到，这一次很耗资源的流程，就叫缓存穿透
解决办法可以是当在mysql里没找到时，在redis存一个空值，下一次找就返回这个空值
缓存雪崩
大量缓存失效，大量请求都去请求mysql，导致死机
限制请求mysql的线程数，或者数据预热，设置不同的超时时间
缓存击穿
某个热点key有大量请求，这个key失效了，就都去请求mysql了


一般都需要好多个redis同时使用
因为可能有一个坏了，别的可以继续用
高可用性：不坏或者多个redis一个坏了没事

redis的主从复制
主从复制
master 负责增删改
slaver 负责读
很多时候读的需求比较大，
在master增删改的时候，复制到slaver里，
这样多个slaver中一个坏了也没事，而且支持高并发
实现了高可用性

但是这个模式master坏了就不行了
所以就有了哨兵模式
有一个哨兵，监视master，坏了就选一个slaver当做master
但是这样浪费了性能

然后就有了redis集群
至少有三个master三个salver组成（多个master），一个master坏了，他的slaver当master
无中心
有一半的redis连不上了某个服务器说明它坏了
数据不用每个人复制一份，key分部分存在不同的master上
